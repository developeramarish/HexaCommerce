// <auto-generated />
using Hexa.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Hexa.Data.Migrations
{
    [DbContext(typeof(HexaDbContext))]
    [Migration("20180415130010_ProductsSupportAdded")]
    partial class ProductsSupportAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Hexa.Core.Domain.Catalog.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IncludeInNavigation");

                    b.Property<string>("Name");

                    b.Property<int>("ParentCategoryId");

                    b.Property<int>("PictureId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Hexa.Core.Domain.Catalog.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdminComment");

                    b.Property<bool>("AllowCustomerReviews");

                    b.Property<string>("AllowedQuantities");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<bool>("DisableBuyButton");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("DisplayStockAvailability");

                    b.Property<bool>("DisplayStockQuantity");

                    b.Property<string>("FullDescription");

                    b.Property<string>("Gtin");

                    b.Property<decimal>("Height");

                    b.Property<bool>("IsFreeShipping");

                    b.Property<bool>("IsShipEnabled");

                    b.Property<bool>("IsTaxExempt");

                    b.Property<decimal>("Length");

                    b.Property<string>("ManufacturerPartNumber");

                    b.Property<bool>("MarkAsNew");

                    b.Property<int>("MinStockQuantity");

                    b.Property<string>("Name");

                    b.Property<decimal>("OldPrice");

                    b.Property<int>("OrderMaximumQuantity");

                    b.Property<int>("OrderMinimumQuantity");

                    b.Property<decimal>("Price");

                    b.Property<decimal>("ProductCost");

                    b.Property<bool>("Published");

                    b.Property<string>("ShortDescription");

                    b.Property<bool>("ShowOnHomePage");

                    b.Property<string>("Sku");

                    b.Property<int>("StockQuantity");

                    b.Property<int>("TaxCategoryId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<decimal>("Weight");

                    b.Property<decimal>("Width");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Hexa.Core.Domain.Catalog.ProductCategoryMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("DisplayOrder");

                    b.Property<int>("ProductId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Hexa.Core.Domain.Catalog.ProductPictureMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("DisplayOrder");

                    b.Property<int>("PictureId");

                    b.Property<int>("ProductId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPictures");
                });

            modelBuilder.Entity("Hexa.Core.Domain.Customers.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("AdminComment");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<Guid>("CustomerGuid");

                    b.Property<bool>("Deleted");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Email");

                    b.Property<int>("FailedLoginAttempts");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<string>("PasswordSalt");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Hexa.Core.Domain.Customers.CustomerCustomerRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("CustomerId");

                    b.Property<int>("CustomerRoleId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerRoleId");

                    b.ToTable("CustomerCustomerRoles");
                });

            modelBuilder.Entity("Hexa.Core.Domain.Customers.CustomerRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("CustomerRoles");
                });

            modelBuilder.Entity("Hexa.Core.Domain.Customers.TokenManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("CustomerId");

                    b.Property<DateTime>("ExpiresOn");

                    b.Property<DateTime>("IssuedOn");

                    b.Property<string>("TokenKey");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("TokenManager");
                });

            modelBuilder.Entity("Hexa.Core.Domain.Logs.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int?>("CustomerId");

                    b.Property<string>("FullMessage");

                    b.Property<string>("IpAddress");

                    b.Property<string>("PageReferrer");

                    b.Property<string>("PageUrl");

                    b.Property<string>("ShortMessage");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Hexa.Core.Domain.Pictures.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Name");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("Hexa.Core.Domain.Catalog.ProductCategoryMapping", b =>
                {
                    b.HasOne("Hexa.Core.Domain.Catalog.Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hexa.Core.Domain.Catalog.ProductPictureMapping", b =>
                {
                    b.HasOne("Hexa.Core.Domain.Catalog.Product")
                        .WithMany("ProductPictures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hexa.Core.Domain.Customers.CustomerCustomerRole", b =>
                {
                    b.HasOne("Hexa.Core.Domain.Customers.Customer", "Customer")
                        .WithMany("CustomerRoles")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hexa.Core.Domain.Customers.CustomerRole", "CustomerRole")
                        .WithMany("CustomerRoles")
                        .HasForeignKey("CustomerRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hexa.Core.Domain.Customers.TokenManager", b =>
                {
                    b.HasOne("Hexa.Core.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hexa.Core.Domain.Logs.Log", b =>
                {
                    b.HasOne("Hexa.Core.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });
#pragma warning restore 612, 618
        }
    }
}
